'use client'
import './addPanel.scss'
import { useState,useRef, useEffect } from "react"
import axios from 'axios'
//--------------res-----------------
import error from '@/res/badError.svg'
import good from '@/res/goodError.svg'
import categoryImg from '@/res/category.svg'
import np from '@/res/name.svg'
import linkImg from '@/res/link.svg'
import number from '@/res/number.svg'
import organization from '@/res/organization.svg'
import sellNumber from '@/res/sellNumber.svg'
import sum from '@/res/sum.svg'
import count from '@/res/count.svg'
import dateImg from '@/res/date.svg'
import manufacturerImg  from '@/res/manufacturer.svg'
//----------next---------------------
import Image from 'next/image'
//----------redux--------------------
import { useAppSelector, useAppDispatch } from '@/store/hooks'
import { setUnit } from '@/store/slice/unit'
//---------url-----------------------
import url from '@/app/axios/URLs'




export default function AddPanel({id}:any){
    //==========state======================
    let [namePart, setNamePart] = useState<string>('')
    let [serialNumberPart, setSerialNumberPart] = useState<string>('')
    let [sellNumberPart, setSellNumberPart] = useState<string>('')
    let [countPart, setCountPart] = useState<string>('')
    let [sell, setSell] = useState<string>('')
    let [contact, setContact] = useState<string>('')
    let [link, setLink] = useState<string>('')
    let [date, setDate] = useState<string>('')
    let [manufacturer, setManufacturer] = useState<string>('')


    let [category, setCategory] = useState<Array<object>>([])
    let [inputCatagory, setInputCatagory] = useState<string>('')
    

    let errors :string[] = []
    //==========refs=======================
    //const refAddButton = useRef<HTMLButtonElement>(null)
    //==========redux======================
    const URLMAINPC = useAppSelector<any>(state => state.URLMAINPC.URLMAINPC)
    const selectorUnit = useAppSelector<any>(state => state.unit.unit)
    const dispatch  = useAppDispatch()

    
    function getStatus(errorData:number,state:string ){
        
        if(state.length >= errorData){    
            
            errors.push('bad')
            return <Image className='error' src={error} width={30} height={30} alt='–û—à–∏–±–∫–∞' title={`–ù–µ –±–æ–ª–µ–µ ${errorData} —Å–∏–º–≤–æ–ª–æ–≤`}/>
        }
        else if(state.length <= errorData && state.length !== 0){
            return <Image className='error' src={good} width={25} height={25} alt='–û—à–∏–±–∫–∞' title="–í—Å–µ —Ö–æ—Ä–æ—à–æ"/>
        }
        else if(state.length === 0){
            
        }
        
        errors.push('bad') 
        
        return ''
        
        
    }
    
    async function sendData(id:number,category:string,namePart:string, serialNumberPart:string,sellNumberPart:string, countPart:string, sell:string,contact:string,link:string, manufacturer:string){

        return await axios.post(url.addPart, {id:id,catagory:category,name: namePart, serialNumber: serialNumberPart,sellNumber: sellNumberPart,count: Number(countPart),  sum:Number(sell),nameContact:contact,linkContact:link,manufacturer:manufacturer})
    }

    async function post(id:string){
        return await axios.post(url.teches, {id:id})
    }
    //------------------fs------------------------
    async function categoryes() {
        return await axios.get(url.catagoryes)
    }
    //--------------------------------------------
    useEffect(()=>{
        categoryes()
        .then(res=>{
            //console.log(res.data)
            
            setCategory(res.data)
        })
    },[])
    
    //----------------render----------------------
    return(
        <div className='addPanel'>
            
            <h2>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏</h2>
            
            <div className='inputZone'>
                <Image src={categoryImg} width={50} height={50} alt='–ò–º—è –∑–∞–ø—á–∞—Å—Ç–∏' className='prop'/>
                {/* <input type="text" placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" value={category} onChange={(e)=>setCategory(e.target.value)}/> */}
                {/* {getStatus(20, category)} */}
                <select onChange={e=>setInputCatagory(e.target.value)}>
                    <option>–í—ã–±—Ä–∞—Ç—å</option>
                    {
                        category.map((item:any, index:number)=>{
                            return <option key={index} value={item.title}>
                                
                                {item.title}
                            </option>
                        })
                    }
                </select>   
            </div>
            <div className='inputZone'>
                <Image src={np} width={50} height={50} alt='–ò–º—è –∑–∞–ø—á–∞—Å—Ç–∏' className='prop'/>
                <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" value={namePart} onChange={(e)=>setNamePart(e.target.value)}/>
                {/* {getStatus(20, namePart)} */}
            </div>
            <div className='inputZone'>
                <Image src={number} width={50} height={50} alt='–ò–º—è –∑–∞–ø—á–∞—Å—Ç–∏' className='prop'/>
                <input type="text" placeholder="–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä" value={sellNumberPart} onChange={(e)=>setSellNumberPart(e.target.value)}/>
                {/* {getStatus(20, sellNumberPart)} */}
            </div>
            <div className='inputZone'>
                <Image src={sellNumber} width={50} height={50} alt='–ò–º—è –∑–∞–ø—á–∞—Å—Ç–∏' className='prop'/>
                <input type="text" placeholder="–¢–æ–≤–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä " value={serialNumberPart} onChange={(e)=>setSerialNumberPart(e.target.value)}/>
                {/* {getStatus(20, serialNumberPart)} */}
            </div>
            <div className='inputZone'>
                <Image src={count} width={50} height={50} alt='–ò–º—è –∑–∞–ø—á–∞—Å—Ç–∏' className='prop' title='–ö–æ–ª-–≤–æ'/>
                <input type="number" placeholder="–ö–æ–ª-–≤–æ" min='0'  value={countPart} onChange={(e)=>setCountPart(e.target.value)} title='–ö–æ–ª-–≤–æ'/>
                
            </div>
            <div className='inputZone'>
                <Image src={sum} width={50} height={50} alt='–ò–º—è –∑–∞–ø—á–∞—Å—Ç–∏' className='prop' title='–¶–µ–Ω–∞'/>
                <input type="number" placeholder="–¶–µ–Ω–∞ –∑–∞ —à—Ç." min='0'  value={sell} onChange={(e)=>setSell(e.target.value)} title='–¶–µ–Ω–∞'/>
               
            </div>
            <div className='inputZone'>
                <Image src={manufacturerImg} width={50} height={50} alt='–ò–º—è –∑–∞–ø—á–∞—Å—Ç–∏' className='prop'/>
                {/* <input type="text" placeholder="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å " value={manufacturer} onChange={(e)=>setManufacturer(e.target.value)}/> */}
                <select onChange={(e)=>setManufacturer(e.target.value)}>
                    <option>–í—ã–±—Ä–∞—Ç—å</option>
                    <option>üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å</option>
                    <option>üá®üá≥ –ö–∏—Ç–∞–π</option>
                    <option>üá∑üá∫ –†–æ—Å—Å–∏—è</option>
                    <option>üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è</option>
                    <option>üáÆüáπ –ò—Ç–∞–ª–∏—è</option>
                    <option>üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞</option>
                    <option>üá¨üáß –ê–Ω–≥–ª–∏—è</option>
                </select>
                {/* {getStatus(20, serialNumberPart)} */}
            </div>
            <div className='inputZone'>
                <Image src={organization} width={50} height={50} alt='–ò–º—è –∑–∞–ø—á–∞—Å—Ç–∏' className='prop'/>
                <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" value={contact} onChange={(e)=>setContact(e.target.value)}/>
                {/* {getStatus(20, contact)} */}
            </div>
            <div className='inputZone'>
                <Image src={linkImg} width={50} height={50} alt='–ò–º—è –∑–∞–ø—á–∞—Å—Ç–∏' className='prop'/>
                <input type="text" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫" value={link} onChange={(e)=>setLink(e.target.value)}/>
                {/* {getStatus(100, link)} */}
            </div>
            

            {errors.length === 0?
                <button className='activeButton' onClick={()=>sendData(id,inputCatagory,namePart, serialNumberPart,sellNumberPart, countPart, sell,contact,link,manufacturer)
                    .then(res=>{
                        
                        post(id).then(res=>{
                            dispatch(setUnit(res.data))
                        })
                    })
                }>–î–û–ë–ê–í–ò–¢–¨</button>
                :
                <button className='disableBytton'>–î–û–ë–ê–í–ò–¢–¨</button>   
            }      
        </div>
    )
}